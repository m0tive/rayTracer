Import( 'global_env' )

env = global_env.Clone()

env.AppendUnique( CPPPATH = ['#include', '\Program Files\ImageMagick-6.7.8-Q16\include'] )
env.Append(LIBS = ['CORE_RL_Magick++_'])
env.AppendUnique( CPPDEFINES = [ env['PLATFORM'].upper() ] )
env.Append(LIBPATH = "\Program Files\ImageMagick-6.7.8-Q16\lib")

if GetOption('debug') :
    env.AppendUnique( CPPDEFINES = [ '_DEBUG' ] )
    if 'g++' in env['TOOLS'] :
        env.AppendUnique( CCFLAGS = [ '-g', '-Wall', '-Wextra' ] )
    elif 'msvc' in env['TOOLS'] :
        env.AppendUnique( CCFLAGS = [
            '/Od', # disable optimisation
            '/Gm', # enable minimal rebuild
            '/RTC1', # enable stack frame and initialisation runtime error checking
            '/W3', # warning level 3
            '/Zi', # generate complete debug information
            '/MTd', # multithreaded static link (debug)
            '/EHsc' # Catch C++ exceptions only
            ] )
else :
    env.AppendUnique( CPPDEFINES = [ 'NDEBUG' ] )
    if 'g++' in env['TOOLS'] :
        env.AppendUnique( CCFLAGS = [ '-O3', '-funroll-loops', '-ffast-math' ] )
    elif 'msvc' in env['TOOLS'] :
        env.AppendUnique( CCFLAGS = [
            '/Ox', # maximum optimisation
            '/wd4996', # disable depricated function warning
            '/W2', # warning level 2
            '/WX', # treat warnings as errors
            '/fp:fast', # fast float point optimisation
            '/MT', # multithreaded static link
            '/EHsc' # Catch C++ exceptions only
            ] )


src_files = Split( 'util.cpp vector.cpp vector2D.cpp matrix.cpp quaternion.cpp color.cpp image.cpp ray.cpp intersection.cpp pointLight.cpp areaLight.cpp camera.cpp material.cpp objLoader.cpp mesh.cpp geometry.cpp AABB.cpp scene.cpp rayTracer.cpp main.cpp')

env.Program( '#bin/rayTracer', src_files )
